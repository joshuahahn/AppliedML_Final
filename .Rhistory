SVM_Poly = SVM_Poly,
SVM_RBF = SVM_RBF))
summary(resamps)
bwplot(resamps, layout = c(3, 1))
dotplot(resamps, metric = "Sens")
dotplot(resamps, metric = "Spec")
dotplot(resamps, metric = "ROC")
resample <- trainControl(method = "cv",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary)
SVMGrid_Lin <- expand.grid(C = c(0.01, 0.1, 1, 10))
SVM_Linear <- train(Class ~ ., data = transformed_train,
method = "svmLinear",
trControl = resample,
verbose = FALSE,
tuneGrid = SVMGrid_Lin,
metric = "ROC")
plot(SVM_Linear, metric = "ROC", plotType = "level")
resample <- trainControl(method = "cv",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary)
SVMGrid_Lin <- expand.grid(C = c(0.01, 0.1, 1, 10))
SVM_Linear <- train(Class ~ ., data = transformed_train,
method = "svmLinear",
trControl = resample,
verbose = FALSE,
tuneGrid = SVMGrid_Lin,
metric = "ROC")
plot(SVM_Linear, metric = "ROC"
plot(SVM_Linear, metric = "ROC")
fitControl_final <- trainControl(method = "none", classProbs = TRUE)
SVM_Linear_final <- train(Class ~.,
data = transformed_train,
method = "svmLinear",
trControl = fitControl_final,
metric = "ROC",
verbose = FALSE,
tuneGrid = data.frame(C=10))
SVM_Linear_pred_train <- predict(SVM_Linear_final, newdata = transformed_train)
SVM_Linear_train_results <- confusionMatrix(transformed_train$Class, SVM_Linear_pred_train)
print(SVM_Linear_train_results)
SVM_Linear_pred_test <- predict(SVM_Linear_final, newdata = transformed_test)
SVM_Linear_test_results <- confusionMatrix(transformed_test$Class, SVM_Linear_pred_test)
print(SVM_Linear_test_results)
library(parallel)
library(dplyr)
library(httr)
library(jsonlite)
library(parallel)
morningside<- "1842 1843 1844 1845 1850 1861 1862 1863 1864 1865 1866 1867 1878 1879 1880 1881 1882 1883 1884 1885 1886 1892 1893 1894 1895 1896 1897 1950 1951 1952 1961 1962 1963 1964 1966 1973 1975 1976 1977 1978 1980 1989 1990 1991 1992 1993 1994 1995"
morningside<-strsplit(morningside, " ")[[1]]
manhattanville<- "1915 1953 1954 1957 1967 1968 1969 1970 1971 1982 1983 1984 1986 1987 1988 1995 1996 1998 1999 2001 2002 2004 2005 2086 2101"
manhattanville<-strsplit(manhattanville, " ")[[1]]
hamilton<- "2050 2051 2052 2053 2054 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 2083 2084 2085 2087 2088 2089 2090 2091 2092 2093 2094 2095 2096 2097 2098 2099 2100 2101 2140"
hamilton<-strsplit(hamilton, " ")[[1]]
washington_s<- "2106 2107 2108 2109 2110 2111 2112 2114 2115 2116 2117 2118 2119 2120 2121 2122 2123 2124 2125 2126 2127 2128 2129 2130 2131 2132 2133 2134 2135 2136 2137 2138 2139 2140 2141 2142 2143 2144 2145 2152 2153 2162 2163 2176 2177"
washington_s<-strsplit(washington_s, " ")[[1]]
washington_n<- "2138 2149 2152 2153 2154 2155 2156 2157 2158 2159 2160 2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 2171 2172 2173 2174 2175 2178 2179 2180 2246"
washington_n<-strsplit(washington_n, " ")[[1]]
combine<- c(morningside, manhattanville, hamilton)
combine<- unique(combine) # There's some overlap in the block codes, but it's too minimal to be disconcerting
# We create a function to call the NYC Open Data API
call_func<- function(x){
base_url<- "https://data.cityofnewyork.us/resource/8y4t-faws.json?year=2024&BLOCK="
updated_url<- paste0(base_url, x)
fetch<-GET(updated_url)
convert<- fromJSON(rawToChar(fetch$content))
convert<- convert[convert$boro==1,]
return(convert)
}
called_data<-mclapply(combine, call_func) # mclapply is a parallel processing method, and it's pretty helpful when running so many API calls, but it can also be a bit finicky. If it doesn't work, you can just use lapply()
# First we call the data dictionary and retrieve what the column names should be
columns<-readxl::read_xlsx("/Users/wyatttheking/Desktop/**Spring 2024**/Machine Learning/Final Project/Property_Assessment_Data_Dictionary (1).xlsx", skip = 1, sheet=2)
csv <- <- read.table("./data.csv", sep=',', header=FALSE)
csv <- read.table("./data.csv", sep=',', header=FALSE)
View(csv)
csv <- read.table("./data.csv", sep=',')
View(csv)
csv <- read.table("./data.csv", sep=',', header = T)
dim(csv)
sapply(csv.data, class)
sapply(csv, class)
sapply(csv, class)
csv <- read.table("./data.csv", sep=',', header = T)
dim(csv)
sapply(csv, class) # sapply performs "class" on each column to retrieve its datatype.
sum(is.na(data))
colSums(is.na(data))
csv <- read.table("./data.csv", sep=',', header = T)
dim(csv)
sapply(csv, class) # sapply performs "class" on each column to retrieve its datatype.
sum(is.na(csv))
colSums(is.na(csv))
nearZeroVar(data, saveMetrics = TRUE)
csv <- read.table("./data.csv", sep=',', header = T)
dim(csv)
sapply(csv, class) # sapply performs "class" on each column to retrieve its datatype.
sum(is.na(csv))
colSums(is.na(csv))
nearZeroVar(csv, saveMetrics = TRUE)
library(dplyr)
library(httr)
library(jsonlite)
library(parallel)
library(caret)
csv <- read.table("./data.csv", sep=',', header = T)
dim(csv)
sapply(csv, class) # sapply performs "class" on each column to retrieve its datatype.
sum(is.na(csv))
colSums(is.na(csv))
nearZeroVar(csv, saveMetrics = TRUE)
ggplot(data = csv) + geom_bar(aes(x = V16), fill = "tomato",
alpha = 0.3, color = "black") +
labs(title = "Market Assessed Total Value, Raw Data", x = "Price (USD)", y = "COUNT") +
theme_bw()
csv <- read.table("./data.csv", sep=',', header = T)
dim(csv)
sapply(csv, class) # sapply performs "class" on each column to retrieve its datatype.
sum(is.na(csv))
colSums(is.na(csv))
nearZeroVar(csv, saveMetrics = TRUE)
ggplot(data = csv) + geom_bar(aes(x = 'pymkttot'), fill = "tomato",
alpha = 0.3, color = "black") +
labs(title = "Market Assessed Total Value, Raw Data", x = "Price (USD)", y = "COUNT") +
theme_bw()
csv <- read.table("./data.csv", sep=',', header = T)
dim(csv)
sapply(csv, class) # sapply performs "class" on each column to retrieve its datatype.
sum(is.na(csv))
colSums(is.na(csv))
nearZeroVar(csv, saveMetrics = TRUE)
ggplot(data = csv) + geom_histogram(aes(x = 'pymkttot'), fill = "tomato",
alpha = 0.3, color = "black") +
labs(title = "Market Assessed Total Value, Raw Data", x = "Price (USD)", y = "COUNT") +
theme_bw()
csv <- read.table("./data.csv", sep=',', header = T)
dim(csv)
sapply(csv, class) # sapply performs "class" on each column to retrieve its datatype.
sum(is.na(csv))
colSums(is.na(csv))
nearZeroVar(csv, saveMetrics = TRUE)
ggplot(data = csv) + geom_histogram(aes(x = pymkttot), fill = "tomato",
alpha = 0.3, color = "black") +
labs(title = "Market Assessed Total Value, Raw Data", x = "Price (USD)", y = "COUNT") +
theme_bw()
csv <- read.table("./data.csv", sep=',', header = T)
print(dim(csv))
print(sapply(csv, class)) # sapply performs "class" on each column to retrieve its datatype.
print(sum(is.na(csv)))
print(colSums(is.na(csv)))
print(nearZeroVar(csv, saveMetrics = TRUE))
ggplot(data = csv) + geom_histogram(aes(x = pymkttot), fill = "tomato",
alpha = 0.3, color = "black") +
labs(title = "Market Assessed Total Value, Raw Data", x = "Price (USD)", y = "COUNT") +
theme_bw()
library(dplyr)
library(httr)
library(jsonlite)
library(parallel)
library(caret)
library(tidymodels)
library(tidyverse)
csv <- read.table("./data.csv", sep=',', header = T)
print(dim(csv))
print(sapply(csv, class)) # sapply performs "class" on each column to retrieve its datatype.
print(sum(is.na(csv)))
print(colSums(is.na(csv)))
print(nearZeroVar(csv, saveMetrics = TRUE))
ggplot(data = csv) + geom_histogram(aes(x = pymkttot), fill = "tomato",
alpha = 0.3, color = "black") +
labs(title = "Market Assessed Total Value, Raw Data", x = "Price (USD)", y = "COUNT") +
theme_bw()
filtered_csv <- subset(csv, pymkttot != 0)
split <- initial_split(filtered_csv, prop = 0.70)
raw_train <- training(split)
raw_test <- testing(split)
# blueprint <- recipe(pymkttot ~ ., data = raw_train) %>%
blueprint <- recipe(pymkttot ~., data=head(raw_train, 10)) %>%
step_string2factor(all_nominal_predictors()) %>%
step_zv(all_predictors()) %>%
step_nzv(all_predictors()) %>%
step_unknown(all_nominal_predictors(), new_level = "NA") %>%
#step_dummy(all_nominal())
step_log(all_outcomes()) %>%
step_impute_knn(all_numeric_predictors())
#step_center(all_numeric_predictors())
#step_scale(all_numeric_predictors()) %>%
#step_pca(all_numeric_predictors())
blueprint_prep <- prep(blueprint, training = raw_train)
filtered_csv <- subset(csv, pymkttot != 0)
library(dplyr)
library(httr)
library(jsonlite)
library(parallel)
library(caret)
library(tidymodels)
library(tidyverse)
csv <- read.table("./data.csv", sep=',', header = T)
print(dim(csv))
print(sapply(csv, class)) # sapply performs "class" on each column to retrieve its datatype.
print(sum(is.na(csv)))
print(colSums(is.na(csv)))
print(nearZeroVar(csv, saveMetrics = TRUE))
ggplot(data = csv) + geom_histogram(aes(x = pymkttot), fill = "tomato",
alpha = 0.3, color = "black") +
labs(title = "Market Assessed Total Value, Raw Data", x = "Price (USD)", y = "COUNT") +
theme_bw()
#filtered_csv <- subset(csv, pymkttot != 0)
filtered_csv <- subset(head(csv, 10), pymkttot != 0)
split <- initial_split(filtered_csv, prop = 0.70)
raw_train <- training(split)
raw_test <- testing(split)
blueprint <- recipe(pymkttot ~ ., data = raw_train) %>%
step_string2factor(all_nominal_predictors()) %>%
step_zv(all_predictors()) %>%
step_nzv(all_predictors()) %>%
step_unknown(all_nominal_predictors(), new_level = "NA") %>%
#step_dummy(all_nominal())
step_log(all_outcomes()) %>%
step_impute_knn(all_numeric_predictors())
#step_center(all_numeric_predictors())
#step_scale(all_numeric_predictors()) %>%
#step_pca(all_numeric_predictors())
blueprint_prep <- prep(blueprint, training = raw_train)
transformed_train <- bake(blueprint_prep, new_data = raw_train)
transformed_test <- bake(blueprint_prep, new_data = raw_test)
transformed_train
View(transformed_test)
View(transformed_train)
#filtered_csv <- subset(csv, pymkttot != 0)
filtered_csv <- subset(head(csv, 10), pymkttot != 0)
split <- initial_split(filtered_csv, prop = 0.70)
raw_train <- training(split)
raw_test <- testing(split)
blueprint <- recipe(pymkttot ~ ., data = raw_train) %>%
step_string2factor(all_nominal_predictors()) %>%
step_zv(all_predictors()) %>%
step_nzv(all_predictors()) %>%
step_unknown(all_nominal_predictors(), new_level = "NA") %>%
#step_dummy(all_nominal())
step_log(all_outcomes()) %>%
step_impute_knn(all_numeric_predictors()) %>%
step_center(all_numeric_predictors()) %>%
step_scale(all_numeric_predictors()) %>%
step_pca(all_numeric_predictors())
blueprint_prep <- prep(blueprint, training = raw_train)
transformed_train <- bake(blueprint_prep, new_data = raw_train)
transformed_test <- bake(blueprint_prep, new_data = raw_test)
View(transformed_train)
#filtered_csv <- subset(csv, pymkttot != 0)
filtered_csv <- subset(head(csv, 10), pymkttot != 0)
split <- initial_split(filtered_csv, prop = 0.70)
raw_train <- training(split)
raw_test <- testing(split)
blueprint <- recipe(pymkttot ~ ., data = raw_train) %>%
step_string2factor(all_nominal_predictors()) %>%
step_zv(all_predictors()) %>%
step_nzv(all_predictors()) %>%
step_unknown(all_nominal_predictors(), new_level = "NA") %>%
step_dummy(all_nominal()) %>%
step_log(all_outcomes()) %>%
step_impute_knn(all_numeric_predictors()) %>%
step_center(all_numeric_predictors()) %>%
step_scale(all_numeric_predictors()) %>%
step_pca(all_numeric_predictors())
blueprint_prep <- prep(blueprint, training = raw_train)
transformed_train <- bake(blueprint_prep, new_data = raw_train)
transformed_test <- bake(blueprint_prep, new_data = raw_test)
#filtered_csv <- subset(csv, pymkttot != 0)
filtered_csv <- subset(head(csv, 10), pymkttot != 0)
split <- initial_split(filtered_csv, prop = 0.70)
raw_train <- training(split)
raw_test <- testing(split)
blueprint <- recipe(pymkttot ~ ., data = raw_train) %>%
step_string2factor(all_nominal_predictors()) %>%
step_zv(all_predictors()) %>%
step_nzv(all_predictors()) %>%
#step_unknown(all_nominal_predictors(), new_level = "NA") %>%
#step_dummy(all_nominal()) %>%
step_log(all_outcomes()) %>%
step_impute_knn(all_numeric_predictors()) %>%
step_center(all_numeric_predictors()) %>%
step_scale(all_numeric_predictors()) %>%
#step_pca(all_numeric_predictors())
#filtered_csv <- subset(csv, pymkttot != 0)
filtered_csv <- subset(head(csv, 10), pymkttot != 0)
split <- initial_split(filtered_csv, prop = 0.70)
raw_train <- training(split)
raw_test <- testing(split)
blueprint <- recipe(pymkttot ~ ., data = raw_train) %>%
step_string2factor(all_nominal_predictors()) %>%
step_zv(all_predictors()) %>%
step_nzv(all_predictors()) %>%
#step_unknown(all_nominal_predictors(), new_level = "NA") %>%
#step_dummy(all_nominal()) %>%
step_log(all_outcomes()) %>%
step_impute_knn(all_numeric_predictors()) %>%
step_center(all_numeric_predictors()) %>%
step_scale(all_numeric_predictors())
#step_pca(all_numeric_predictors())
blueprint_prep <- prep(blueprint, training = raw_train)
transformed_train <- bake(blueprint_prep, new_data = raw_train)
transformed_test <- bake(blueprint_prep, new_data = raw_test)
dim(transformed_train)
#filtered_csv <- subset(csv, pymkttot != 0)
filtered_csv <- subset(head(csv, 20), pymkttot != 0)
split <- initial_split(filtered_csv, prop = 0.70)
raw_train <- training(split)
raw_test <- testing(split)
blueprint <- recipe(pymkttot ~ ., data = raw_train) %>%
step_string2factor(all_nominal_predictors()) %>%
step_zv(all_predictors()) %>%
step_nzv(all_predictors()) %>%
#step_unknown(all_nominal_predictors(), new_level = "NA") %>%
#step_dummy(all_nominal()) %>%
step_log(all_outcomes()) %>%
step_impute_knn(all_numeric_predictors()) %>%
step_center(all_numeric_predictors()) %>%
step_scale(all_numeric_predictors())
step_pca(all_numeric_predictors())
#filtered_csv <- subset(csv, pymkttot != 0)
filtered_csv <- subset(head(csv, 20), pymkttot != 0)
split <- initial_split(filtered_csv, prop = 0.70)
raw_train <- training(split)
raw_test <- testing(split)
blueprint <- recipe(pymkttot ~ ., data = raw_train) %>%
step_string2factor(all_nominal_predictors()) %>%
step_zv(all_predictors()) %>%
step_nzv(all_predictors()) %>%
#step_unknown(all_nominal_predictors(), new_level = "NA") %>%
#step_dummy(all_nominal()) %>%
step_log(all_outcomes()) %>%
step_impute_knn(all_numeric_predictors()) %>%
step_center(all_numeric_predictors()) %>%
step_scale(all_numeric_predictors()) %>%
step_pca(all_numeric_predictors())
blueprint_prep <- prep(blueprint, training = raw_train)
transformed_train <- bake(blueprint_prep, new_data = raw_train)
transformed_test <- bake(blueprint_prep, new_data = raw_test)
dim(transformed_train)
dim(transformed_test)
#filtered_csv <- subset(csv, pymkttot != 0)
filtered_csv <- subset(head(csv, 20), pymkttot != 0)
split <- initial_split(filtered_csv, prop = 0.70)
raw_train <- training(split)
raw_test <- testing(split)
blueprint <- recipe(pymkttot ~ ., data = raw_train) %>%
step_string2factor(all_nominal_predictors()) %>%
step_zv(all_predictors()) %>%
step_nzv(all_predictors()) %>%
step_unknown(all_nominal_predictors(), new_level = "NA") %>%
#step_dummy(all_nominal()) %>%
step_log(all_outcomes()) %>%
step_impute_knn(all_numeric_predictors()) %>%
step_center(all_numeric_predictors()) %>%
step_scale(all_numeric_predictors()) %>%
step_pca(all_numeric_predictors())
blueprint_prep <- prep(blueprint, training = raw_train)
transformed_train <- bake(blueprint_prep, new_data = raw_train)
transformed_test <- bake(blueprint_prep, new_data = raw_test)
#filtered_csv <- subset(csv, pymkttot != 0)
filtered_csv <- subset(head(csv, 20), pymkttot != 0)
split <- initial_split(filtered_csv, prop = 0.70)
raw_train <- training(split)
raw_test <- testing(split)
blueprint <- recipe(pymkttot ~ ., data = raw_train) %>%
step_string2factor(all_nominal_predictors()) %>%
step_zv(all_predictors()) %>%
step_nzv(all_predictors()) %>%
#step_unknown(all_nominal_predictors(), new_level = "NA") %>%
#step_dummy(all_nominal()) %>%
step_log(all_outcomes()) %>%
step_impute_knn(all_numeric_predictors()) %>%
step_center(all_numeric_predictors()) %>%
step_scale(all_numeric_predictors()) %>%
step_pca(all_numeric_predictors())
#filtered_csv <- subset(csv, pymkttot != 0)
filtered_csv <- subset(head(csv, 20), pymkttot != 0)
split <- initial_split(filtered_csv, prop = 0.70)
raw_train <- training(split)
raw_test <- testing(split)
blueprint <- recipe(pymkttot ~ ., data = raw_train) %>%
step_string2factor(all_nominal_predictors()) %>%
step_zv(all_predictors()) %>%
step_nzv(all_predictors()) %>%
#step_unknown(all_nominal_predictors(), new_level = "NA") %>%
#step_dummy(all_nominal()) %>%
step_log(all_outcomes()) %>%
step_impute_knn(all_predictors()) %>%
step_center(all_numeric_predictors()) %>%
step_scale(all_numeric_predictors()) %>%
step_pca(all_numeric_predictors())
blueprint_prep <- prep(blueprint, training = raw_train)
transformed_train <- bake(blueprint_prep, new_data = raw_train)
transformed_test <- bake(blueprint_prep, new_data = raw_test)
#filtered_csv <- subset(csv, pymkttot != 0)
filtered_csv <- subset(head(csv, 100), pymkttot != 0)
split <- initial_split(filtered_csv, prop = 0.70)
raw_train <- training(split)
raw_test <- testing(split)
blueprint <- recipe(pymkttot ~ ., data = raw_train) %>%
step_string2factor(all_nominal_predictors()) %>%
step_zv(all_predictors()) %>%
step_nzv(all_predictors()) %>%
#step_unknown(all_nominal_predictors(), new_level = "NA") %>%
#step_dummy(all_nominal()) %>%
step_log(all_outcomes()) %>%
step_impute_knn(all_predictors()) %>%
step_center(all_numeric_predictors()) %>%
step_scale(all_numeric_predictors()) %>%
step_pca(all_numeric_predictors())
blueprint_prep <- prep(blueprint, training = raw_train)
transformed_train <- bake(blueprint_prep, new_data = raw_train)
transformed_test <- bake(blueprint_prep, new_data = raw_test)
#filtered_csv <- subset(csv, pymkttot != 0)
filtered_csv <- subset(head(csv, 1000), pymkttot != 0)
split <- initial_split(filtered_csv, prop = 0.70)
raw_train <- training(split)
raw_test <- testing(split)
blueprint <- recipe(pymkttot ~ ., data = raw_train) %>%
step_string2factor(all_nominal_predictors()) %>%
step_zv(all_predictors()) %>%
step_nzv(all_predictors()) %>%
#step_unknown(all_nominal_predictors(), new_level = "NA") %>%
#step_dummy(all_nominal()) %>%
step_log(all_outcomes()) %>%
step_impute_knn(all_predictors()) %>%
step_center(all_numeric_predictors()) %>%
step_scale(all_numeric_predictors()) %>%
step_pca(all_numeric_predictors())
blueprint_prep <- prep(blueprint, training = raw_train)
transformed_train <- bake(blueprint_prep, new_data = raw_train)
transformed_test <- bake(blueprint_prep, new_data = raw_test)
#filtered_csv <- subset(csv, pymkttot != 0)
filtered_csv <- subset(csv, pymkttot != 0)
split <- initial_split(filtered_csv, prop = 0.70)
raw_train <- training(split)
raw_test <- testing(split)
blueprint <- recipe(pymkttot ~ ., data = raw_train) %>%
step_string2factor(all_nominal_predictors()) %>%
step_zv(all_predictors()) %>%
step_nzv(all_predictors()) %>%
#step_unknown(all_nominal_predictors(), new_level = "NA") %>%
#step_dummy(all_nominal()) %>%
step_log(all_outcomes()) %>%
step_impute_knn(all_predictors()) %>%
step_center(all_numeric_predictors()) %>%
step_scale(all_numeric_predictors()) %>%
step_pca(all_numeric_predictors())
blueprint_prep <- prep(blueprint, training = raw_train)
transformed_train <- bake(blueprint_prep, new_data = raw_train)
transformed_test <- bake(blueprint_prep, new_data = raw_test)
shiny::runApp('FinalProj')
runApp('~/Downloads')
runApp('~/Downloads')
runApp('~/Downloads')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('~/Downloads')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
View(split)
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
