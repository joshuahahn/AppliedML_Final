#step_scale(all_numeric_predictors()) %>%
#step_pca(all_numeric_predictors())
blueprint_prep <- prep(blueprint, training = raw_train)
transformed_train <- bake(blueprint_prep, new_data = raw_train)
transformed_test <- bake(blueprint_prep, new_data = raw_test)
transformed_train
View(transformed_test)
View(transformed_train)
#filtered_csv <- subset(csv, pymkttot != 0)
filtered_csv <- subset(head(csv, 10), pymkttot != 0)
split <- initial_split(filtered_csv, prop = 0.70)
raw_train <- training(split)
raw_test <- testing(split)
blueprint <- recipe(pymkttot ~ ., data = raw_train) %>%
step_string2factor(all_nominal_predictors()) %>%
step_zv(all_predictors()) %>%
step_nzv(all_predictors()) %>%
step_unknown(all_nominal_predictors(), new_level = "NA") %>%
#step_dummy(all_nominal())
step_log(all_outcomes()) %>%
step_impute_knn(all_numeric_predictors()) %>%
step_center(all_numeric_predictors()) %>%
step_scale(all_numeric_predictors()) %>%
step_pca(all_numeric_predictors())
blueprint_prep <- prep(blueprint, training = raw_train)
transformed_train <- bake(blueprint_prep, new_data = raw_train)
transformed_test <- bake(blueprint_prep, new_data = raw_test)
View(transformed_train)
#filtered_csv <- subset(csv, pymkttot != 0)
filtered_csv <- subset(head(csv, 10), pymkttot != 0)
split <- initial_split(filtered_csv, prop = 0.70)
raw_train <- training(split)
raw_test <- testing(split)
blueprint <- recipe(pymkttot ~ ., data = raw_train) %>%
step_string2factor(all_nominal_predictors()) %>%
step_zv(all_predictors()) %>%
step_nzv(all_predictors()) %>%
step_unknown(all_nominal_predictors(), new_level = "NA") %>%
step_dummy(all_nominal()) %>%
step_log(all_outcomes()) %>%
step_impute_knn(all_numeric_predictors()) %>%
step_center(all_numeric_predictors()) %>%
step_scale(all_numeric_predictors()) %>%
step_pca(all_numeric_predictors())
blueprint_prep <- prep(blueprint, training = raw_train)
transformed_train <- bake(blueprint_prep, new_data = raw_train)
transformed_test <- bake(blueprint_prep, new_data = raw_test)
#filtered_csv <- subset(csv, pymkttot != 0)
filtered_csv <- subset(head(csv, 10), pymkttot != 0)
split <- initial_split(filtered_csv, prop = 0.70)
raw_train <- training(split)
raw_test <- testing(split)
blueprint <- recipe(pymkttot ~ ., data = raw_train) %>%
step_string2factor(all_nominal_predictors()) %>%
step_zv(all_predictors()) %>%
step_nzv(all_predictors()) %>%
#step_unknown(all_nominal_predictors(), new_level = "NA") %>%
#step_dummy(all_nominal()) %>%
step_log(all_outcomes()) %>%
step_impute_knn(all_numeric_predictors()) %>%
step_center(all_numeric_predictors()) %>%
step_scale(all_numeric_predictors()) %>%
#step_pca(all_numeric_predictors())
#filtered_csv <- subset(csv, pymkttot != 0)
filtered_csv <- subset(head(csv, 10), pymkttot != 0)
split <- initial_split(filtered_csv, prop = 0.70)
raw_train <- training(split)
raw_test <- testing(split)
blueprint <- recipe(pymkttot ~ ., data = raw_train) %>%
step_string2factor(all_nominal_predictors()) %>%
step_zv(all_predictors()) %>%
step_nzv(all_predictors()) %>%
#step_unknown(all_nominal_predictors(), new_level = "NA") %>%
#step_dummy(all_nominal()) %>%
step_log(all_outcomes()) %>%
step_impute_knn(all_numeric_predictors()) %>%
step_center(all_numeric_predictors()) %>%
step_scale(all_numeric_predictors())
#step_pca(all_numeric_predictors())
blueprint_prep <- prep(blueprint, training = raw_train)
transformed_train <- bake(blueprint_prep, new_data = raw_train)
transformed_test <- bake(blueprint_prep, new_data = raw_test)
dim(transformed_train)
#filtered_csv <- subset(csv, pymkttot != 0)
filtered_csv <- subset(head(csv, 20), pymkttot != 0)
split <- initial_split(filtered_csv, prop = 0.70)
raw_train <- training(split)
raw_test <- testing(split)
blueprint <- recipe(pymkttot ~ ., data = raw_train) %>%
step_string2factor(all_nominal_predictors()) %>%
step_zv(all_predictors()) %>%
step_nzv(all_predictors()) %>%
#step_unknown(all_nominal_predictors(), new_level = "NA") %>%
#step_dummy(all_nominal()) %>%
step_log(all_outcomes()) %>%
step_impute_knn(all_numeric_predictors()) %>%
step_center(all_numeric_predictors()) %>%
step_scale(all_numeric_predictors())
step_pca(all_numeric_predictors())
#filtered_csv <- subset(csv, pymkttot != 0)
filtered_csv <- subset(head(csv, 20), pymkttot != 0)
split <- initial_split(filtered_csv, prop = 0.70)
raw_train <- training(split)
raw_test <- testing(split)
blueprint <- recipe(pymkttot ~ ., data = raw_train) %>%
step_string2factor(all_nominal_predictors()) %>%
step_zv(all_predictors()) %>%
step_nzv(all_predictors()) %>%
#step_unknown(all_nominal_predictors(), new_level = "NA") %>%
#step_dummy(all_nominal()) %>%
step_log(all_outcomes()) %>%
step_impute_knn(all_numeric_predictors()) %>%
step_center(all_numeric_predictors()) %>%
step_scale(all_numeric_predictors()) %>%
step_pca(all_numeric_predictors())
blueprint_prep <- prep(blueprint, training = raw_train)
transformed_train <- bake(blueprint_prep, new_data = raw_train)
transformed_test <- bake(blueprint_prep, new_data = raw_test)
dim(transformed_train)
dim(transformed_test)
#filtered_csv <- subset(csv, pymkttot != 0)
filtered_csv <- subset(head(csv, 20), pymkttot != 0)
split <- initial_split(filtered_csv, prop = 0.70)
raw_train <- training(split)
raw_test <- testing(split)
blueprint <- recipe(pymkttot ~ ., data = raw_train) %>%
step_string2factor(all_nominal_predictors()) %>%
step_zv(all_predictors()) %>%
step_nzv(all_predictors()) %>%
step_unknown(all_nominal_predictors(), new_level = "NA") %>%
#step_dummy(all_nominal()) %>%
step_log(all_outcomes()) %>%
step_impute_knn(all_numeric_predictors()) %>%
step_center(all_numeric_predictors()) %>%
step_scale(all_numeric_predictors()) %>%
step_pca(all_numeric_predictors())
blueprint_prep <- prep(blueprint, training = raw_train)
transformed_train <- bake(blueprint_prep, new_data = raw_train)
transformed_test <- bake(blueprint_prep, new_data = raw_test)
#filtered_csv <- subset(csv, pymkttot != 0)
filtered_csv <- subset(head(csv, 20), pymkttot != 0)
split <- initial_split(filtered_csv, prop = 0.70)
raw_train <- training(split)
raw_test <- testing(split)
blueprint <- recipe(pymkttot ~ ., data = raw_train) %>%
step_string2factor(all_nominal_predictors()) %>%
step_zv(all_predictors()) %>%
step_nzv(all_predictors()) %>%
#step_unknown(all_nominal_predictors(), new_level = "NA") %>%
#step_dummy(all_nominal()) %>%
step_log(all_outcomes()) %>%
step_impute_knn(all_numeric_predictors()) %>%
step_center(all_numeric_predictors()) %>%
step_scale(all_numeric_predictors()) %>%
step_pca(all_numeric_predictors())
#filtered_csv <- subset(csv, pymkttot != 0)
filtered_csv <- subset(head(csv, 20), pymkttot != 0)
split <- initial_split(filtered_csv, prop = 0.70)
raw_train <- training(split)
raw_test <- testing(split)
blueprint <- recipe(pymkttot ~ ., data = raw_train) %>%
step_string2factor(all_nominal_predictors()) %>%
step_zv(all_predictors()) %>%
step_nzv(all_predictors()) %>%
#step_unknown(all_nominal_predictors(), new_level = "NA") %>%
#step_dummy(all_nominal()) %>%
step_log(all_outcomes()) %>%
step_impute_knn(all_predictors()) %>%
step_center(all_numeric_predictors()) %>%
step_scale(all_numeric_predictors()) %>%
step_pca(all_numeric_predictors())
blueprint_prep <- prep(blueprint, training = raw_train)
transformed_train <- bake(blueprint_prep, new_data = raw_train)
transformed_test <- bake(blueprint_prep, new_data = raw_test)
#filtered_csv <- subset(csv, pymkttot != 0)
filtered_csv <- subset(head(csv, 100), pymkttot != 0)
split <- initial_split(filtered_csv, prop = 0.70)
raw_train <- training(split)
raw_test <- testing(split)
blueprint <- recipe(pymkttot ~ ., data = raw_train) %>%
step_string2factor(all_nominal_predictors()) %>%
step_zv(all_predictors()) %>%
step_nzv(all_predictors()) %>%
#step_unknown(all_nominal_predictors(), new_level = "NA") %>%
#step_dummy(all_nominal()) %>%
step_log(all_outcomes()) %>%
step_impute_knn(all_predictors()) %>%
step_center(all_numeric_predictors()) %>%
step_scale(all_numeric_predictors()) %>%
step_pca(all_numeric_predictors())
blueprint_prep <- prep(blueprint, training = raw_train)
transformed_train <- bake(blueprint_prep, new_data = raw_train)
transformed_test <- bake(blueprint_prep, new_data = raw_test)
#filtered_csv <- subset(csv, pymkttot != 0)
filtered_csv <- subset(head(csv, 1000), pymkttot != 0)
split <- initial_split(filtered_csv, prop = 0.70)
raw_train <- training(split)
raw_test <- testing(split)
blueprint <- recipe(pymkttot ~ ., data = raw_train) %>%
step_string2factor(all_nominal_predictors()) %>%
step_zv(all_predictors()) %>%
step_nzv(all_predictors()) %>%
#step_unknown(all_nominal_predictors(), new_level = "NA") %>%
#step_dummy(all_nominal()) %>%
step_log(all_outcomes()) %>%
step_impute_knn(all_predictors()) %>%
step_center(all_numeric_predictors()) %>%
step_scale(all_numeric_predictors()) %>%
step_pca(all_numeric_predictors())
blueprint_prep <- prep(blueprint, training = raw_train)
transformed_train <- bake(blueprint_prep, new_data = raw_train)
transformed_test <- bake(blueprint_prep, new_data = raw_test)
#filtered_csv <- subset(csv, pymkttot != 0)
filtered_csv <- subset(csv, pymkttot != 0)
split <- initial_split(filtered_csv, prop = 0.70)
raw_train <- training(split)
raw_test <- testing(split)
blueprint <- recipe(pymkttot ~ ., data = raw_train) %>%
step_string2factor(all_nominal_predictors()) %>%
step_zv(all_predictors()) %>%
step_nzv(all_predictors()) %>%
#step_unknown(all_nominal_predictors(), new_level = "NA") %>%
#step_dummy(all_nominal()) %>%
step_log(all_outcomes()) %>%
step_impute_knn(all_predictors()) %>%
step_center(all_numeric_predictors()) %>%
step_scale(all_numeric_predictors()) %>%
step_pca(all_numeric_predictors())
blueprint_prep <- prep(blueprint, training = raw_train)
transformed_train <- bake(blueprint_prep, new_data = raw_train)
transformed_test <- bake(blueprint_prep, new_data = raw_test)
shiny::runApp('FinalProj')
runApp('~/Downloads')
runApp('~/Downloads')
runApp('~/Downloads')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('~/Downloads')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
View(split)
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
shiny::runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(tidymodels)
library(tidyverse)
library(randomForest)
data <- read.table("./credit+approval/crx.data", sep=',', header=FALSE)
data <- transform(data, V2 = as.numeric(V2),
V3 = as.numeric(V3),
V8 = as.numeric(V8),
V11 = as.numeric(V11),
V14 = as.numeric(V14),
V15 = as.numeric(V15))
sum(is.na(data))
colSums(is.na(data))
nearZeroVar(data, saveMetrics = TRUE)
ggplot(data = data) + geom_bar(aes(x = V16), fill = "tomato",
alpha = 0.3, color = "black") +
labs(title = "Credit Approval, Raw Data", x = "Approval", y = "COUNT") +
theme_bw()
set.seed(1)
data$V16 <- factor(data$V16, levels = c("+", "-"))
split <- initial_split(data, prop = 0.70, strata = "V16")
train_data <- training(split)
test_data <- testing(split)
blueprint <- recipe(V16 ~ ., data = data) %>%
step_string2factor(all_nominal_predictors()) %>%
step_nzv(all_predictors()) %>%
step_impute_knn(all_predictors()) %>%
step_center(all_numeric_predictors()) %>%
step_scale(all_numeric_predictors()) %>%
step_pca(all_numeric_predictors()) %>%
step_dummy(all_nominal())
blueprint_prep <- prep(blueprint, training = train_data)
transformed_train <- bake(blueprint_prep, new_data = train_data)
transformed_test <- bake(blueprint_prep, new_data = test_data)
# We have to turn our prediction classes to factors
transformed_train$V16_X. <- gsub('1','T', transformed_train$V16_X.)
transformed_train$V16_X. <- gsub('0','F', transformed_train$V16_X.)
transformed_train$V16_X. <- factor(transformed_train$V16_X., levels= c('T', 'F'))
transformed_test$V16_X. <- gsub('1','T', transformed_test$V16_X.)
transformed_test$V16_X. <- gsub('0','F', transformed_test$V16_X.)
transformed_test$V16_X. <- factor(transformed_test$V16_X., levels= c('T', 'F'))
colnames(transformed_train) <- make.names(colnames(transformed_train))
names(transformed_train)[names(transformed_train) == 'V16_X.'] <- 'Class'
names(transformed_test)[names(transformed_test) == 'V16_X.'] <- 'Class'
ggplot(data = transformed_train) + geom_bar(aes(x = Class), fill = "tomato",
alpha = 0.3, color = "black") +
labs(title = "Credit Approval, Transformed Train", x = "Approval",
y = "COUNT") + theme_bw()
ggplot(data = transformed_test) + geom_bar(aes(x = Class), fill = "tomato",
alpha = 0.3, color = "black") +
labs(title = "Credit Approval, Transformed Test", x = "Approval",
y = "COUNT") + theme_bw()
initial_rf <- randomForest('Class' ~., data = transformed_train)
initial_rf <- randomForest(Class ~., data = transformed_train)
plot(initial_rf)
resample <- trainControl(method = "cv",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary)
hyper_grid <- expand.grid(mtry = c(13, 15, 17, 20, 22, 25),
splitrule = c("gini", "extratrees"),
min.node.size = c(5, 7, 9))
rf_fit <- train(Class ~ .,
data = transformed_train,
method = "ranger",
verbose = FALSE,
trControl = resample,
tuneGrid = hyper_grid,
metric = "ROC",
num.trees = 200)
plot(rf_fit, metric = "ROC", plotType = "level")
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
runApp('FinalProj')
install.packages('rsconnect')
install.packages("rsconnect")
shiny::runApp('FinalProj')
rsconnect::setAccountInfo(name='appliedmlfinal',
token='E06E1457495171AD2B2F33F786E88DA0',
secret='e+JxYLlW5EyoljHwYkyRGPvXozO2ycVntqq1h9N6')
rsconnect::deployApp('/app.R')
rsconnect::deployApp('/Users/joshuahahn/Desktop/AML/Final/AppliedML_Final/FinalProj/app.R')
rsconnect::deployApp('/Users/joshuahahn/Desktop/AML/Final/AppliedML_Final/FinalProj/')
